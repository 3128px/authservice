syntax = "proto3";

package authservice.config;

import "config/oidc/config.proto";
import "validate/validate.proto";

// Match specifies how a request can be matched to a filter chain.
message Match {
    // header specifies the http header used to match against.
    string header = 1 [(validate.rules).string.min_len = 1];
    oneof criteria {
        option (validate.required) = true;
        // prefix specifies the prefix of the header value upon which to match against.
        string prefix = 2 [(validate.rules).string.min_len = 1];
        // equality specifies the absolute value of a header value upon which to match against.
        string equality = 3  [(validate.rules).string.min_len = 1];
    }
}

// Filter represents a filter-specific configuration.
message Filter {
    oneof type {
        option (validate.required) = true;
        // the OpenID Connect filter configuration.
        oidc.OIDCConfig oidc = 1;
    }
}

// FilterChain represents a chain of 1 or more filters that will sequentially process an HTTP request.
message FilterChain {
    // name is a user-defined identifier for the processing chain used in logging messages.
    string name = 1 [(validate.rules).string.min_len = 1];
    // match describes an optional rule to determine whether an HTTP request should be processed by the filter chain.
    // If not defined the FilterChain will always be selected to process a request.
    Match match = 2;
    // filter describes the configuration of one of more filters in the filter chain.
    repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1];
}

message Config {
    // chains represents one of more processing chains for incoming requests. A chain is selected based on the first matched.
    // Order of chain declaration is therefore important.
    repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];
    // listen_address describes the IP address for the authservice to listen for incoming requests to process.
    string listen_address = 2 [(validate.rules).string.ip = true];
    // listen_port describes the TCP port for the authservice to listen for incoming requests to process.
    int32 listen_port = 3 [(validate.rules).int32.lt = 65536];
    // log_level describes the verbosity of logs generated by the authservice. Must be one of `trace`, `debug`, `info', 'error' or 'critical'.
    string log_level = 4 [(validate.rules).string = {in: ["trace", "debug", "info", "error", "critical"]}];

    // Threads in the thread pool to use for processing
    // The main thread will be used for accepting connections, before sending them to the thread-pool
    // for processing, so the total amount of running threads, including the main thread, will be N+1
    uint32 threads = 5 [(validate.rules).uint32.gte = 1];
}
