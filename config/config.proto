syntax = "proto3";

package authservice.config;

import "config/oidc/config.proto";
import "validate/validate.proto";

// Specifies how a request can be matched to a filter chain.
message Match {

    // The name of the http header used to match against.
    // Required.
    string header = 1 [(validate.rules).string.min_len = 1];

    // The criteria by which to match.
    // Must be one of `prefix` or `equality`.
    // Required.
    oneof criteria {
        option (validate.required) = true;

        // The expected prefix. If the actual value of the header starts with this prefix,
        // then it will be considered a match.
        string prefix = 2 [(validate.rules).string.min_len = 1];

        // The expected value. If the actual value of the header exactly equals this value,
        // then it will be considered a match.
        string equality = 3  [(validate.rules).string.min_len = 1];
    }
}

// A filter configuration.
message Filter {

    // The type of filter. Currently, the only valid type is `oidc`.
    // Required.
    oneof type {
        option (validate.required) = true;

        // An OpenID Connect filter configuration.
        oidc.OIDCConfig oidc = 1;
    }
}

// A chain of one or more filters that will sequentially process an HTTP request.
message FilterChain {

    // A user-defined identifier for the processing chain used in log messages.
    // Required.
    string name = 1 [(validate.rules).string.min_len = 1];

    // A rule to determine whether an HTTP request should be processed by the filter chain.
    // If not defined, the filter chain will match every request.
    // Optional.
    Match match = 2;

    // The configuration of one of more filters in the filter chain. When the filter chain
    // matches an incoming request, then this list of filters will be applied to the request
    // in the order that they are declared.
    // All filters are evaluated until one of them returns a non-OK response.
    // If all filters return OK, the envoy proxy is notified that the request may continue.
    // The first filter that returns a non-OK response causes the request to be rejected with
    // the filter's returned status and any remaining filters are skipped.
    // At least one `Filter` is required in this array.
    repeated Filter filters = 3 [(validate.rules).repeated.min_items = 1];
}

// The top-level configuration object.
// For a simple example, see the [sample JSON in the bookinfo configmap template](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/authservice-configmap-template.yaml).
message Config {

    // Each incoming http request is matched against the list of filters in the chain, in order,
    // until a matching filter is found. The first matching filter is then applied to the request.
    // After the first match is made, other filters in the chain are ignored.
    // Order of chain declaration is therefore important.
    // At least one `FilterChain` is required in this array.
    repeated FilterChain chains = 1 [(validate.rules).repeated.min_items = 1];

    // The IP address for the authservice to listen for incoming requests to process.
    // Required.
    string listen_address = 2 [(validate.rules).string.ip = true];

    // The TCP port for the authservice to listen for incoming requests to process.
    // Required.
    int32 listen_port = 3 [(validate.rules).int32.lt = 65536];

    // The verbosity of logs generated by the authservice.
    // Must be one of `trace`, `debug`, `info', 'error' or 'critical'.
    // Required.
    string log_level = 4 [(validate.rules).string = {in: ["trace", "debug", "info", "error", "critical"]}];

    // The number of threads in the thread pool to use for processing.
    // The main thread will be used for accepting connections, before sending them to the thread-pool
    // for processing. The total number of running threads, including the main thread, will be N+1.
    // Required.
    uint32 threads = 5 [(validate.rules).uint32.gte = 1];
}
