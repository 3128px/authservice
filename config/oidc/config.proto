syntax = "proto3";

package authservice.config.oidc;

import "config/common/config.proto";
import "validate/validate.proto";

// TokenConfig defines how an access token obtained through an OIDC flow is forwarded to downstream services as
// well as the cookie name it is included in when returned to a browser.
//
//  # Forward as a standard Authorization Bearer token.
//  header: Authorization
//  premable: Bearer
message TokenConfig {
    // the name of the http header in which to insert a token when forwarding to internal mesh services. For example `Authorization`.
    string header = 1 [(validate.rules).string.min_len = 1];
    // any preamble to include in the header when forwarding a token. For example "Bearer"
    string preamble = 2;
}

message LogoutConfig {
    // Optional. A http request path that the authservice matches against to initiate logout. Whenever a request is made to that
    // path, the authservice will remove the authservice-specific cookies and respond with a redirect to the configured
    // `chains[].filters[].oidc.logout.redirect_to_uri`. Removing the cookies causes the user to be unauthenticated in future requests.
    // If your application has its own logout controller, then you may wish to have that controller redirect to this
    // path. If your application does not need its own logout controller, then the application's logout button/link's
    // href can GET or POST directly to this path.
    string path = 1 [(validate.rules).string.min_len = 1];
    // Optional. A URI specifying the destination to which the authservice will redirect any request made to the
    // `chains[].filters[].oidc.logout.path`. For example, you may wish to redirect the logged out user to the
    // homepage of your app, or to the
    // [logout endpoint of your IDP](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout).
    // As with all redirects, the user's browser will perform a GET to this URI.
    string redirect_to_uri = 2 [(validate.rules).string.min_len = 1];
}

// OIDCConfig defines the configuration of an OpenID Connect filter that can be used to retrieve identity and access tokens
// via the standard Code Grant flow from an IdP. Retrieved tokens are encrypted and placed in cookies for use in identifying
// callers in subsequent requests.
message OIDCConfig {
    // the IdP's authorization endpoint. See https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint
    common.Endpoint authorization = 1 [(validate.rules).message.required = true];
    // the IdP's token endpoint. See https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint
    common.Endpoint token = 2 [(validate.rules).message.required = true];
    // the IdP's JWKS configuration used during `id_token` verification.
    oneof jwks_config {
        option (validate.required) = true;
        common.Endpoint jwks_uri = 3;
        string jwks = 4;
    }
    // this value will be used as the `redirect_uri` param of the Authorization Code Grant Authentication Request as defined in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest.
    // You must add this URL to the Redirection URI values for the Client pre-registered at the OIDC provider.
    // You must also prepare your Istio VirtualService to ensure that this URL will get routed to product page.
    common.Endpoint callback = 5 [(validate.rules).message.required = true];
    // the OIDC client ID assigned to the filter. See https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest.
    string client_id = 6 [(validate.rules).string.min_len = 1];
    // the OIDC client secret assigned to the filter. See https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
    string client_secret = 7 [(validate.rules).string.min_len = 1];
    // optional additional scopes passed to the IdP during authenticating a user. The `openid` scope is always sent to the
    // IdP so does not need to be specified. See https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest.
    repeated string scopes = 8;
    // the URL a browser is redirected to after successful authentication and token acquisition.
    string landing_page = 9 [(validate.rules).string.min_len = 1]; // TODO: use [(validate.rules).string.uri_ref = true] when implemented for C/C++.
    // a secret used to derive cryptographic material for protecting cookies and other data.
    string cryptor_secret = 10 [(validate.rules).string.min_len = 1];
    // a unique identifier of the authservice's browser cookies. Can be any string.
    // Only needed when multiple apps in the same domain are each protected by their own authservice, to avoid cookie name conflicts.
    string cookie_name_prefix = 11;
    // the configuration for forwarding `id_token`s to the mesh.
    TokenConfig id_token = 12 [(validate.rules).message.required = true];
    // the optional configuration for forwarding `access_token`s to the mesh.
    TokenConfig access_token = 13;
    // the timeout in seconds for performing an authentication with an IdP.
    uint32 timeout = 14 [(validate.rules).uint32.gte = 30];
    LogoutConfig logout = 15;
}
