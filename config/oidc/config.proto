syntax = "proto3";

package authservice.config.oidc;

import "config/common/config.proto";
import "validate/validate.proto";

// Defines how a token obtained through an OIDC flow is forwarded to services.
message TokenConfig {

    // The name of the header that authservice adds to the request when forwarding to services.
    // The value of this header will contain the `preamble` and the token.
    // This value is case-insensitive, as http header names are case-insensitive.
    // Note that this value must be `Authorization` for the
    // [Istio Authentication Policy](https://istio.io/docs/tasks/security/authn-policy/)
    // to inspect the token.
    // Required.
    string header = 1 [(validate.rules).string.min_len = 1];

    // The authentication scheme of the token.
    // For example, when the preamble is `Bearer` and `header` is `Authorization`, the following
    // header will be added to the request to the service: `Authorization: Bearer ID_TOKEN_VALUE`.
    // Note that this value must be `Bearer`, case-sensitive, when header is `Authorization`.
    // Optional.
    string preamble = 2;
}

// When specified, the authservice will destroy the authservice session when a request is
// made to the configured path.
message LogoutConfig {

    // A http request path that the authservice matches against to initiate logout.
    // Whenever a request is made to that path, the authservice will remove the authservice-specific
    // cookies and respond with a redirect to the configured `redirect_to_uri`. Removing the cookies
    // causes the user to be unauthenticated in future requests.
    // If the service application has its own logout controller, then it may be desirable to have its
    // logout controller redirect to this path. If the service application does not need its own logout
    // controller, then the application's logout button/link's href can GET or POST directly to this path.
    // Required.
    string path = 1 [(validate.rules).string.min_len = 1];

    // A URI specifying the destination to which the authservice will redirect any request made to the
    // logout `path`. For example, it may be desirable to redirect the logged out user to the homepage
    // of the service application, or to the
    // [logout endpoint of the OIDC Provider](https://openid.net/specs/openid-connect-session-1_0.html#RPLogout).
    // As with all redirects, the user's browser will perform a GET to this URI.
    // Required.
    string redirect_to_uri = 2 [(validate.rules).string.min_len = 1];
}

// The configuration of an OpenID Connect filter that can be used to retrieve identity and access tokens
// via the standard authorization code grant flow from an OIDC Provider. Retrieved tokens are encrypted and placed
// in cookies for use in subsequent requests.
message OIDCConfig {

    // The OIDC Provider's [authorization endpoint](https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint).
    // Required.
    common.Endpoint authorization = 1 [(validate.rules).message.required = true];

    // The OIDC Provider's [token endpoint](https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint).
    // Required.
    common.Endpoint token = 2 [(validate.rules).message.required = true];

    // The OIDC Provider's JWKS configuration used during `id_token` verification.
    // Use either `jwks_uri` or `jwks` (see below).
    // Required.
    oneof jwks_config {
        option (validate.required) = true;

        // *This is currently ignored.* In a future version it will be the URL of the OIDC provider’s
        // public key set to validate signature of the JWT.
        // See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
        // This should match the `jwksUri` value of
        // [Istio Authentication Policy](https://istio.io/docs/tasks/security/authn-policy/).
        common.Endpoint jwks_uri = 3;

        // The JSON JWKS response from the OIDC provider’s `jwks_uri` URI which can be found in
        // the OIDC provider's
        // [configuration response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse).
        // Note that this JSON value must be escaped when embedded in a json configmap
        // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/authservice-configmap-template.yaml)).
        string jwks = 4;
    }

    // This value will be used as the `redirect_uri` param of the authorization code grant
    // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
    // This URL must be one of the Redirection URI values for the Client pre-registered at the OIDC provider.
    // Note: The Istio gateway's VirtualService must be prepared to ensure that this URL will get routed to
    // the service so that the authservice can intercept the request and handle it
    // (see [example](https://github.com/istio-ecosystem/authservice/blob/master/bookinfo-example/config/bookinfo-gateway.yaml)).
    // Required.
    common.Endpoint callback = 5 [(validate.rules).message.required = true];

    // The OIDC client ID assigned to the filter to be used in the
    // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
    // Required.
    string client_id = 6 [(validate.rules).string.min_len = 1];

    // The OIDC client secret assigned to the filter to be used in the
    // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
    // Required.
    string client_secret = 7 [(validate.rules).string.min_len = 1];

    // Additional scopes passed to the OIDC Provider in the
    // [Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest).
    // The `openid` scope is always sent to the OIDC Provider, and does not need to be specified here.
    // Required, but an empty array is allowed.
    repeated string scopes = 8;

    // A unique identifier of the authservice's browser cookies. Can be any string.
    // Only needed when multiple services in the same domain are each protected by
    // their own authservice, in which case each service's authservice should have
    // a unique value to avoid cookie name conflicts.
    // Optional.
    string cookie_name_prefix = 9;

    // The configuration for adding ID Tokens as headers to requests forwarded to a service.
    // Required.
    TokenConfig id_token = 10 [(validate.rules).message.required = true];

    // The configuration for adding Access Tokens as headers to requests forwarded to a service.
    // Optional.
    TokenConfig access_token = 11;

    // When specified, the authservice will destroy the authservice session when a request is
    // made to the configured path.
    // Optional.
    LogoutConfig logout = 12;

    // The Authservice associates obtained OIDC tokens with a session ID in a session store.
    // It also stores some temporary information during the login process into the session store,
    // which will be removed when the user finishes the login.
    // This configuration option sets the number of seconds since a user's session with the Authservice has started
    // until that session should expire.
    // When configured to `0`, which is the default value, the session will never timeout based on the time
    // that it was started, but can still timeout due to being idle.
    // When both `max_absolute_session_timeout` and `max_session_idle_timeout` are zero, then sessions will never
    // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.
    // Optional.
    uint32 max_absolute_session_timeout = 13;

    // The Authservice associates obtained OIDC tokens with a session ID in a session store.
    // It also stores some temporary information during the login process into the session store,
    // which will be removed when the user finishes the login.
    // This configuration option sets the number of seconds since the most recent incoming request from that user
    // until the user's session with the Authservice should expire.
    // When configured to `0`, which is the default value, session expiration will not consider idle time,
    // but can still consider timeout based on maximum absolute time since added.
    // When both `max_absolute_session_timeout` and `max_session_idle_timeout` are zero, then sessions will never
    // expire. These settings do not affect how quickly the OIDC tokens contained inside the user's session expire.
    // Optional.
    uint32 max_session_idle_timeout = 14;

    // When specified, the Authservice will trust the specified Certificate Authority when performing HTTPS calls to
    // the Token Endpoint of the OIDC Identity Provider.
    // Optional.
    string trusted_certificate_authority = 15;
}
